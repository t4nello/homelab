- name: Create dir for deployment
  file:
    path: "{{ DEPLOY_PATH }}/guacamole-stack/"
    state: directory
    mode: '0755'
    recurse: yes

- name: Ensure socat is installed
  package:
    name: socat
    state: present

- name: Copy wol-relay.sh to /usr/bin
  copy:
    src: wol-relay.sh
    dest: /usr/bin/wol-relay.sh
    owner: root
    group: root
    mode: '0755'

- name: Copy wol-relay.service to systemd
  copy:
    src: wol-relay.service
    dest: /etc/systemd/system/wol-relay.service
    owner: root
    group: root
    mode: '0644'

- name: Reload systemd to pick up new service
  systemd:
    daemon_reload: true

- name: Enable and start wol-relay service
  systemd:
    name: wol-relay.service
    enabled: true
    state: started


- name: Build custom mysql image with schemas
  docker_image:
    build:
      dockerfile: mysql.Dockerfile
    name: mysql/guacamole
    tag: latest
    force_source: true
    force_tag: true

- name: Template docker-compose.yml
  template:
    src: "docker-compose.yml.j2"
    dest: "{{ DEPLOY_PATH }}/guacamole-stack/docker-compose.yml"
    mode: "0644"

- name: Deploy Monitoring stack
  uri:
    url: "http://{{ HOST }}:9000/api/stacks/create/standalone/string?endpointId={{ ENDPOINT_ID }}"
    method: POST
    headers:
      Authorization: "Bearer {{ portainer_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      Name: "guacamole"
      StackFileContent: "{{ lookup('file', DEPLOY_PATH + '/guacamole-stack/docker-compose.yml') }}"
      ComposeFormat: "3"
      EndpointID: {{ ENDPOINT_ID | default(1) }}
      Env:
      - name: GUACD_HOSTNAME
        value: "guacd"
      - name: MYSQL_HOSTNAME
        value: "mysql"
      - name: MYSQL_DATABASE
        value: "{{GUACAMOLE_DB_NAME}}"
      - name: MYSQL_USER
        value: "{{GUACAMOLE_DB_USER}}"
      - name: MYSQL_PASSWORD
        value: "{{GUACAMOLE_DB_PASSWORD}}"
      - name: MYSQL_ROOT_PASSWORD
        value: "{{MYSQL_ROOT_PASSWORD}}"
    status_code: [200, 409]
    timeout: 300
  register: stack_create_result